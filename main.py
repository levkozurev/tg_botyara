import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
import telebot
from sympy import (sympify, symbols, exp, log, ln, sin, cos, tan,
                   asin, acos, atan, sinh, cosh, tanh, asinh,
                   acosh, atanh, sqrt, Abs, pi, E, gamma, factorial)
from sympy.parsing.sympy_parser import (parse_expr, standard_transformations,
                                        implicit_multiplication, convert_xor,
                                        function_exponentiation)
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import re

TOKEN = '7783043242:AAFgZJjdK06fSJY4-NYC-awxIjFjHs7-fEI'
bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
transformations = (standard_transformations +
                   (implicit_multiplication,
                    convert_xor,
                    function_exponentiation))


def extract_function(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    text = text.replace(' ', '').replace('^', '**').lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: y=..., z=..., f(x)=..., f(x,y)=...
    if re.match(r'^(y|z|f\(x\)|f\(x,y\))=', text):
        left, right = text.split('=', 1)
        if 'y' in left or 'f(x)' in left:
            return ('2d', right)
        else:
            return ('3d', right)
    return None


def plot_2d_function(func_expr, x_range=(-10, 10), num_points=1000):

    x = np.linspace(x_range[0], x_range[1], num_points)
    x_sym = symbols('x')


    local_dict = {
        'x': x_sym,
        'exp': exp, 'log': log, 'ln': ln,
        'sin': sin, 'cos': cos, 'tan': tan,
        'asin': asin, 'acos': acos, 'atan': atan,
        'sinh': sinh, 'cosh': cosh, 'tanh': tanh,
        'asinh': asinh, 'acosh': acosh, 'atanh': atanh,
        'sqrt': sqrt, 'abs': Abs, 'gamma': gamma,
        'factorial': factorial,
        'pi': pi, 'e': E
    }

    try:
        expr = parse_expr(func_expr, transformations=transformations, local_dict=local_dict)
        func = sympify(expr)
        y = np.array([float(func.subs(x_sym, xi).evalf()) for xi in x], dtype=np.float64)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(12, 7), facecolor='#f5f5f5')
        ax = plt.axes()
        ax.set_facecolor('#f0f0f0')

        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        line, = ax.plot(x, y, 'b-', linewidth=2.5,
                        label=f'y = {func_expr}',
                        marker='', markersize=0)

        # –û—Å–æ–±—ã–µ —Ç–æ—á–∫–∏
        with np.errstate(divide='ignore', invalid='ignore'):
            deriv = np.gradient(y, x)
            infl_points = np.where(np.diff(np.sign(deriv)))[0]

            if len(infl_points) > 0 and len(infl_points) < 20:
                ax.plot(x[infl_points], y[infl_points], 'ro',
                        markersize=6, label='–¢–æ—á–∫–∏ –ø–µ—Ä–µ–≥–∏–±–∞')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ax.grid(True, linestyle='--', alpha=0.6)
        ax.legend(prop={'size': 12}, loc='upper right')
        plt.title(f'–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏: y = {func_expr}', pad=20, fontsize=14)
        plt.xlabel('x', fontsize=12)
        plt.ylabel('y', fontsize=12)

        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=120, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        return buffer
    except Exception as e:
        print(f"2D Error: {e}")
        return None


def plot_3d_function(func_expr, x_range=(-5, 5), y_range=(-5, 5), num_points=80):
    """–°—Ç—Ä–æ–∏—Ç 3D –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    x = np.linspace(x_range[0], x_range[1], num_points)
    y = np.linspace(y_range[0], y_range[1], num_points)
    X, Y = np.meshgrid(x, y)
    x_sym, y_sym = symbols('x y')

    local_dict = {
        'x': x_sym, 'y': y_sym,
        **{k: v for k, v in globals().items()
           if k in ['exp', 'log', 'sin', 'cos', 'tan',
                    'asin', 'acos', 'atan', 'sqrt', 'abs',
                    'sinh', 'cosh', 'tanh', 'pi', 'e']}
    }

    try:
        expr = parse_expr(func_expr, transformations=transformations, local_dict=local_dict)
        func = sympify(expr)
        Z = np.zeros_like(X, dtype=np.float64)

        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑)
        x_vals = X.ravel()
        y_vals = Y.ravel()
        z_vals = np.zeros_like(x_vals)

        for i in range(len(x_vals)):
            try:
                z_vals[i] = float(func.subs({x_sym: x_vals[i], y_sym: y_vals[i]}).evalf())
            except:
                z_vals[i] = np.nan

        Z = z_vals.reshape(X.shape)

        # –°–æ–∑–¥–∞–Ω–∏–µ 3D –≥—Ä–∞—Ñ–∏–∫–∞
        fig = plt.figure(figsize=(14, 10))
        ax = fig.add_subplot(111, projection='3d')

        # –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
        surf = ax.plot_surface(X, Y, Z, cmap='viridis',
                               rstride=1, cstride=1,
                               edgecolor='none',
                               alpha=0.95,
                               antialiased=True)

        # –ö–æ–Ω—Ç—É—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏
        ax.contour(X, Y, Z, 20, offset=np.nanmin(Z) - 1, cmap='coolwarm')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        ax.set_title(f'3D –ì—Ä–∞—Ñ–∏–∫: z = {func_expr}', pad=20, fontsize=14)
        ax.set_xlabel('X', labelpad=12)
        ax.set_ylabel('Y', labelpad=12)
        ax.set_zlabel('Z', labelpad=12)

        # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
        fig.colorbar(surf, shrink=0.5, aspect=10, pad=0.1)

        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞
        ax.view_init(elev=30, azim=45)

        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=100)
        buffer.seek(0)
        plt.close()
        return buffer
    except Exception as e:
        print(f"3D Error: {e}")
        return None


@bot.message_handler(commands=['start', 'help', 'functions'])
def send_welcome(message):
    help_text = """
üéØ <b>–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† 2.0</b> üéØ

üìå <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>
<code>y = —Ñ—É–Ω–∫—Ü–∏—è(x)</code> - –¥–ª—è 2D
<code>z = —Ñ—É–Ω–∫—Ü–∏—è(x,y)</code> - –¥–ª—è 3D

üìö <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: + - * / ** ^ 
‚Ä¢ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è: sin, cos, tan, cot
‚Ä¢ –ì–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–µ: sinh, cosh, tanh
‚Ä¢ –û–±—Ä–∞—Ç–Ω—ã–µ: asin, acos, atan, acot
‚Ä¢ –õ–æ–≥–∞—Ä–∏—Ñ–º—ã: log, ln
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ: sqrt, abs, gamma, factorial
‚Ä¢ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: pi, e

‚ú® <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ–≥–∏–±–∞ (2D)
‚Ä¢ –ö–æ–Ω—Ç—É—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ (3D)
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π

üìù <b>–ü—Ä–∏–º–µ—Ä—ã 2D:</b>
<code>y = exp(-x/3)*sin(5*x)</code>
<code>y = gamma(x)/factorial(floor(abs(x)))</code>

üåê <b>–ü—Ä–∏–º–µ—Ä—ã 3D:</b>
<code>z = sin(x)*cos(y)*exp(-(x^2+y^2)/10)</code>
<code>z = tanh(sqrt(x^2 + y^2))</code>

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /examples –¥–ª—è –±–æ–ª—å—à–µ–≥–æ
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')


@bot.message_handler(commands=['examples'])
def send_examples(message):
    examples = """
üî¢ <b>–ò–ù–¢–ï–†–ï–°–ù–´–ï –ü–†–ò–ú–ï–†–´</b> üî¢

2D:
<code>y = sinc(x) = sin(x)/x</code>
<code>y = airy(x)*exp(-abs(x)/3)</code>
<code>y = floor(x)*frac(x)</code>

3D:
<code>z = sin(x*y)/(x*y)</code>
<code>z = exp(-(x^4 + y^4)/10)</code>
<code>z = atan(x^2 - y^2)</code>

üé® <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏</b>:
‚Ä¢ –°–ø–∏—Ä–∞–ª—å: <code>y = sin(x^2), z = cos(x^2)</code>
‚Ä¢ –ú–æ—Ä—Å–∫–∞—è –≤–æ–ª–Ω–∞: <code>z = sin(x) + cos(y) + sin(x+y)</code>
"""
    bot.send_message(message.chat.id, examples, parse_mode='HTML')


@bot.message_handler(func=lambda m: True)
def handle_message(message):
    try:
        func_data = extract_function(message.text)
        if not func_data:
            bot.reply_to(message,
                         "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>y = —Ñ—É–Ω–∫—Ü–∏—è(x)</code> –∏–ª–∏\n<code>z = —Ñ—É–Ω–∫—Ü–∏—è(x,y)</code>",
                         parse_mode='HTML')
            return

        func_type, func_expr = func_data
        msg = bot.send_message(message.chat.id, "üîÑ –°—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)")

        if func_type == '2d':
            img = plot_2d_function(func_expr)
            caption = f"2D: y = {func_expr}"
        else:
            img = plot_3d_function(func_expr)
            caption = f"3D: z = {func_expr}"

        if img:
            bot.delete_message(message.chat.id, msg.message_id)
            bot.send_photo(message.chat.id, img, caption=caption)
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.",
                                  message.chat.id, msg.message_id)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    bot.infinity_polling()